{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","sibling","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.263869f3.map","sourceRoot":"..\\src","sourcesContent":["//新增一个节点\r\n// window.dom = {\r\n//     create(tagName) {\r\n//         return document.createElement(tagName);\r\n//     }\r\n// };\r\n// /*相当于\r\n// window.dom={};\r\n// dom.create=function(){};*/\r\n\r\n/*如果要在div里面加标签的话 可以将标签当作一个字符串传进去\r\ntemplate内可以传任意标签*/\r\nwindow.dom = {\r\n    create(string) {\r\n        const container = document.createElement(\"template\");\r\n        container.innerHTML = string.trim();//trim()的作用是去掉字符串两边的空格\r\n        return container.content.firstChild;\r\n    },\r\n    //在节点后面新增一个节点\r\n    after(node, node2) {\r\n        //找到节点的父节点 调用父节点的.inserBefore的方法\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n    },\r\n    //在节点前面新增一个节点\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node2, node);\r\n    },\r\n    //新增子节点\r\n    append(parent, node) {\r\n        parent.appendChild(node);\r\n    },\r\n    //新增父节点\r\n    wrap(node, parent) {\r\n        //先将新增节点移到节点前面，再将节点插到新增节点里面。\r\n        dom.before(node, parent)\r\n        dom.append(parent, node)\r\n    },\r\n    //删除一个节点\r\n    remove(node) {\r\n        node.parentNode.removeChild(node);\r\n        return node;\r\n    },\r\n    //删除一个节点的所有子节点\r\n    empty(node) {\r\n        //const { childNodes } = node;//等价于const childNodes=node.childNodes\r\n        const array = [];\r\n        let x = node.firstChild;\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild));\r\n            x = node.firstChild;\r\n        }\r\n        return array;\r\n    },\r\n    //用于读写属性 （重载）\r\n    attr(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name);\r\n        }\r\n    },\r\n    //用于读写文本内容\r\n    //读写的标签内若有其他标签 改写时会被文本内容代替 可以考虑设置一个独立标签\r\n    text(node, string) {\r\n        //node.innerHTML=string;//ie\r\n        //node.textContent=string;//firefox chrome\r\n        //适配\r\n        if (arguments.length === 2) {\r\n            if ('innerText' in node) {\r\n                node.innerText = string;\r\n            } else {\r\n                node.textContent = string;\r\n            }\r\n        } else if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerText;\r\n            } else {\r\n                return node.textContent;\r\n            }\r\n        }\r\n    },\r\n    //用于HTML的读写\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string;\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML;\r\n        }\r\n    },\r\n    //用于style的读写\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            //dom.style(div,'color','red') 想要修改\r\n            node.style[name] = value;\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                //dom.style(aiv,'color') 想要读取\r\n                return node.style[name];\r\n            } else if (name instanceof object) {\r\n                //dom.style(div,{color:'red'})\r\n                for (let key in name) {\r\n                    //key:border/color\r\n                    //如果key是一个变量的话需要将key用[]括起来,否则key就会变成字符串\r\n                    node.style[key] = name[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //添加class 删除class 查看class\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className);\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className);\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className);\r\n        }\r\n    },\r\n    //添加事件监听\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn);\r\n    },\r\n    //删除事件监听\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn);\r\n    },\r\n    //在一个范围内查找\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector);\r\n    },\r\n    //找一个节点的父节点\r\n    parent(node) {\r\n        return node.parentNode;\r\n    },\r\n    //找一个节点的孩子\r\n    children(node) {\r\n        return node.children;\r\n    },\r\n    //找一个节点的兄弟姐妹\r\n    sibling(node) {\r\n        Array.from(node.parentNode.children).filter(n => n !== node);\r\n    },\r\n    //找节点的弟弟\r\n    next(node) {\r\n        let x = node.nextSibling;\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling;\r\n        }\r\n        return x;\r\n    },\r\n    //找节点的哥哥\r\n    previous(node) {\r\n        let x = node.previousSibling;\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling;\r\n        }\r\n        return x;\r\n    },\r\n    //遍历所有节点\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i]);\r\n        }\r\n    },\r\n    //查看节点的排行\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i;\r\n        for (let i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break;\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n};"]}